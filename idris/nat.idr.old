module nat

import bool
import pair

{- We now introduce a type to represent the natural numbers using
Peano arithmetic.

In this arithmetic, there are two especially important rules
- zero is a natural number
- the successor of any natural number is a natural number

From this pair of rules arises an infinity of natural numbers. Zero is
a natural number, and the successor of any natural number is a natural
number, so the successor of zero is a natural number; and now, because
the successor of zero is a natural number, its successor, i.e., the
successor of (the successor of zero) is one too; ad infinitum!

HOMEWORK #1: Learn this way of thinking by rehearsing it mentally
until you've really got it. Work with friends. Explain it to each
other. Test each other. -}

{- We capture this idea with the following deceptively simple data
type definition. What it says is that nat is a type, and there are two
ways to construct a nat. One is to use the constructor, O. The other
is to apply the constructor S to a value that is already known to be
of type nat.  Because O is already known to be of type nat, you can
thus apply S to O (yielding the term (S O)) and the result is also of
type nat. And now because it is a value of type nat, you can apply S
to it to get another value of type nat. Ad infinitum.

HOMEWORK #2: Study and think about this example as many times as
necessary to get it. Work with friends. Teach each other. Test each
other.  -}

-- Here's our data type definition.

||| A data type to represent the natural numbers.  We use a lower case
||| "n" in the name to distinguish our nat type from Idris's Nat type
data nat = O | S nat

-- zero
z: nat
z = O

-- one
o: nat
o = S O

-- two
t: nat
t = S (S O)

-- three
r: nat
r = S t

-- HOMEWORK #5: Make up some examples of your own. Add them below this
-- comment.

-- four
u: nat
u = S r

--five
v: nat
v = S u

||| returns true if the argument is (represents) zero, otherwise false
isZero: nat -> bool
isZero O = true
isZero _ = false

-- HOMEWORK #7 Bind x to the result of applying isZero to r. Add your
-- code below this comment.
x: bool
x = false

||| returns the successor of any given nat
succ: nat -> nat
succ n = S n

-- HOMEWORK #8 Bind y to the result of applying succ to O. Add code here.
y: nat
y = o
||| returns the predecessor of any given nat
pred: nat -> nat
pred O = O
pred (S n) = n

||| return true if the argument is even otherwise false
evenb: nat -> bool
evenb O = true
evenb (S O) = false
evenb (S (S n)) = evenb n

--HOMEWORK #10 In English, describe all of the steps involved in
--evaluating the function application expression, evenb (S r). You
--must be able to explain this process to yourself and your friends!
--The idea is that you keep on applying reduction (simplification)
--rules until you get to a value that cannot be reduced further. Write
--your answer by filling in the following block comment.

{-The function evaluates the expression from the inside out,
so it will first look at the (S O) part, and it will say that
since the O is true ( is a even number ) the successor of this
O will be false, so it will be odd. And than the function
evaluates that the successor of the successor of this O
(S(S O) is true because it`s the successor of this odd number.
Than it will evaluate the successor of the successor of the
successor of O (S(S(S O))) that will be false because it will
be the successor of and even number and than it will
evaluate the last  successor saying that it will be true
because it is the successor of and odd number.-}

-- HOMEWORK #11 Here's a function that takes a pair of natural numbers
-- (values of type nat) and that returns their sum (as another value
-- of type nat). We give you the function name and type along with the
-- left hand sides of the two rules that you'll need. We've filled in
-- the right hand sides with placeholders. Your task is to replace the
-- right hand sides of the two rules.

||| given a pair of natural numbers, return its sum
addp: pair nat nat -> nat
addp (mkPair O m) = m
addp (mkPair (S n) m) = S(addp (mkPair n m))
-- S(addp (mkPair n m))

-- PROBLEM #1: Multiplication as iterated addition

multp: pair nat nat -> nat
multp (mkPair O m) = O
multp (mkPair (S n) m) = addp ((mkPair (multp (mkPair n m)) m))

--PROBLEM #2:  Factorial

factp: nat -> nat
factp O = S O
factp (S n) = multp (mkPair (S n) (factp n))
{-
subp(n,m) {n=0,m:nat - 0
          {n:nat, m = 0 - 0
          {n = Sn', m=Sm' - n-m= n' - m'
-}
subp: pair nat nat -> nat
subp (mkPair O m) = O
subp (mkPair n O) = n
subp (mkPair (S n) (S m)) = subp (mkPair n m)

||| Given a pair of natural numbers, (a,b), return true
||| if a <= b otherwise return false
lep: pair nat nat -> bool
lep (mkPair O m) = true
lep (mkPair (S n) O) = false
lep (mkPair (S n) (S m)) = lep (mkPair n m)

exp:  pair nat nat -> nat
exp (mkPair x O) = (S O)
exp (mkPair x n) = multp(mkPair x (exp(mkPair x (pred n))))

eqp: pair nat nat -> bool -- given a pair of natural numbers, (a, b), return true if a is equal to be, otherwise return false
eqp (mkPair O O) = true
eqp (mkPair O m) = false
eqp (mkPair m O) = false
eqp (mkPair (S n) (S m)) = eqp (mkPair n m)

gtp: pair nat nat -> bool  -- given a pair of natural numbers, (a, b), return true if a is greater than b, otherwise return false
gtp (mkPair n m) = not(lep (mkPair n m))

gep: pair nat nat -> bool  -- given a pair of natural numbers, (a, b), return true of a is greater than or equal to b
gep (mkPair n O) = true
gep (mkPair O (S n)) = false
gep (mkPair (S n) (S m)) =  gep (mkPair n m)

ltp: pair nat nat -> bool -- given a pair of natural numbers, (a, b), return true if a is less than b
ltp (mkPair n m) = not(gep (mkPair n m))

fibo: nat -> nat
fibo O = O
fibo (S O) = (S O)
fibo (S (S n)) = addp (mkPair (fibo (S n)) (fibo n))
